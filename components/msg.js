const { image_search, image_search_generator } = require("duckduckgo-images-api");
const censure = require("../assets/censure.json");

function botCommands(lang) {
  if (lang == 'ru') {
    return `ET‚ö°Ô∏è *–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞*\n
*/sell* - _–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –º–∞—Ä–∫–µ—Ç_
*/add* - _–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç—É_
*/pogoda* - _–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã_
*/app* - _–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è_
*/market* - _–ú–µ–Ω—é –º–∞—Ä–∫–µ—Ç–∞_
*/map* - _–ú–µ–Ω—é –∫–∞—Ä—Ç—ã_
*/ali* - _Aliexpress —Å—Å—ã–ª–∫–∏_
*/help* - _–ü–µ—Ä–µ—á–µ–Ω—å –∫–æ–º–∞–Ω–¥_
*/social* - _–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–æ—Ü—Å–µ—Ç–∏_
*/pic* <–Ω–∞–∑–≤–∞–Ω–∏–µ> - _–ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–∏–Ω–∫–∏_
üìç - –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –≥–µ–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é —Ä–æ–∑–µ—Ç–∫—É`

  } else {
    return `ET‚ö°Ô∏è *Bot commands*\n
*/sell* - _Add product to sell_
*/add* - _Add point to map_
*/weather* - _Weather forecast_
*/app* - _App webpage_
*/market* - _Market menu_
*/map* - _Map menu_
*/ali* - _Aliexpress links_
*/help* - _List of commands_
*/social* - _ElectroTallinn social media links_
*/pic* <name> - _Search for image_
üìç - Send your geo position to get nearest socket around you`
  }
}


module.exports = {
  init: bot => {
    bot.start((ctx) => ctx.reply(botCommands(ctx.message.from.language_code), { disable_web_page_preview: true, parse_mode: "Markdown", disable_notification: true }));
    // New member
    bot.on("new_chat_members", (ctx) => {
      bot.telegram.sendMessage(ctx.chat.id, `<b>Welcome / –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.message.new_chat_member.first_name}!</b>\n ‚ö†Ô∏è <a href="https://t.me/electrotallinn/106800/116732">–û–∑–Ω–∞–∫–æ–º—å—Å—è</a> —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º –≥—Ä—É–ø–ø—ã –≤ –¢–µ–ª–µ–≥—Ä–∞–º–µ! ‚ö†Ô∏è \n ‚ö†Ô∏è <a href="https://t.me/electrotallinn/106800/116732">Please read</a> group information in Telegram! ‚ö†Ô∏è\n`,
        { disable_web_page_preview: true, parse_mode: "HTML", disable_notification: true });
      ctx.replyWithSticker('CAACAgQAAxkBAAEKmPJgtu1nXdo4zdB0lKLHAAFzcsmOyl8AAj8KAAJrfPFTmXeoVb1qy_cfBA');
    });

    bot.command("help", ctx => {
      bot.telegram.sendMessage(ctx.chat.id, botCommands(ctx.message.from.language_code), { disable_web_page_preview: true, parse_mode: "Markdown", disable_notification: true });
    });

    bot.command("test", async ctx => {
      console.log(ctx.message.from)
      let avatarObject = await ctx.telegram.getUserProfilePhotos(ctx.update.message.from.id, 0, 1)
      let getUrl = await ctx.telegram.getFileLink(avatarObject.photos[0][2].file_id);
      const userAvatarUrl = getUrl.href;
      console.log(userAvatarUrl)
    });

    bot.command("ali", ctx => {
      bot.telegram.sendMessage(ctx.chat.id, "ET‚ö°Ô∏è *Aliexpress links*\n\n_https://bit.ly/2DVyl1d_", { disable_web_page_preview: true, parse_mode: "Markdown", disable_notification: true });
    });

    bot.command("app", ctx => {
      bot.telegram.sendMessage(ctx.chat.id, "ET‚ö°Ô∏è *App*\n\n_https://electrotallinn.ee_", { disable_web_page_preview: true, parse_mode: "Markdown", disable_notification: true });
    });

    bot.command("map", ctx => {
      let botMessage = "ET‚ö°Ô∏è *Map*\n";
      bot.telegram.sendMessage(ctx.chat.id, botMessage, {
        disable_notification: true,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üåè Map", url: 'https://electrotallinn.ee/map' },
              { text: "üèÜ Top Ranks", url: 'https://electrotallinn.ee/users/ranks' },
            ],
            [
              { text: "‚ÑπÔ∏è App", url: 'https://electrotallinn.ee' },
              { text: "üìç Add Point", url: 'https://t.me/electrotallinnbot?start' },
            ]
          ]
        }
      })
    });

    bot.command("market", ctx => {
      let botMessage = "ET‚ö°Ô∏è *Market*\n";
      bot.telegram.sendMessage(ctx.chat.id, botMessage, {
        disable_notification: true,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üõí Market", url: 'https://electrotallinn.ee/market' },
              { text: "‚ö° App", url: 'https://electrotallinn.ee' },
            ],
            [
              { text: "üë§ Group", url: 'https://t.me/electrotallinn/106273' },
              { text: "üí∞ Bot Sell", url: 'https://t.me/electrotallinnbot?start' },
            ]
          ]
        }
      })
    });

    bot.command("say", ctx => {
      const tell = ctx.message.text;
      const say = tell.substr(tell.indexOf(" ") + 1);
      ctx.deleteMessage();
      bot.telegram.sendMessage(ctx.chat.id, `${say}`, { disable_web_page_preview: true, parse_mode: "Markdown" });
    });

    bot.command("social", ctx => {
      let botMessage = "ET‚ö°Ô∏è *Social media links*\n";
      //ctx.deleteMessage();
      bot.telegram.sendMessage(ctx.chat.id, botMessage, {
        disable_notification: true,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [
              { text: "‚ö°Ô∏è Facebook", url: 'https://www.facebook.com/groups/electrotallinn' },
              { text: "‚ö°Ô∏è Instagram", url: 'https://www.instagram.com/electrotallinn' },
              { text: "‚ö°Ô∏è VK", url: 'https://vk.com/electrotallinn' }
            ],
            [
              { text: "‚ö°Ô∏è Youtube", url: 'https://www.youtube.com/electrotallinn' },
              { text: "‚ö°Ô∏è Flickr", url: 'https://www.flickr.com/electrotallinn' },
              { text: "‚ö°Ô∏è Reddit", url: 'https://www.reddit.com/r/electrotallinn' }
            ],
          ]
        }
      })
    });

    //bot.on("sticker", (ctx) => ctx.reply("üëç"));
    bot.action("timeout-msg", ctx => {
      bot.telegram.sendMessage(ctx.chat.id, "text", { disable_web_page_preview: true, parse_mode: "Markdown", disable_notification: true }).then(({ message_id }) => { setTimeout(() => { ctx.deleteMessage(message_id) }, 15000) });
    });

    bot.command("pic", (ctx) => {
      const request = ctx.message.text;
      let search;
      if (request.split(" ").length > 1) {
        search = request.substr(request.indexOf(" ") + 1);
      } else {
        search = "random image";
      }
      function print(results) {
        //console.log("RESULTS:"+results);
        if (results != '') {
          let rndImg = results[Math.floor(Math.random() * results.length)];
          ctx.replyWithPhoto({ url: rndImg.image }, { caption: search });
        } else {
          bot.telegram.sendMessage(ctx.chat.id, "Not found..");
        }
      }
      image_search({ query: search, moderate: true, iterations: 1, retries: 1 }).then(results => print(results));
    });

    // ------------- Hears ------------- //

    bot.hears(["–ü—Ä–∏–≤–µ—Ç", "–ø—Ä–∏–≤–µ—Ç", "—Ö–∞–π", "–•–∞–π", "Yo", "–ó–¥–∞—Ä–æ–≤–∞", "–∑–¥–∞—Ä–æ–≤–∞", "–ø—Ä–∏–≤", "–ü—Ä–∏–≤", "–ó–¥—Ä–∞—Å—Ç–µ", "–∑–¥—Ä–∞—Å—Ç–µ"], (ctx) => ctx.reply("–ü—Ä–∏–≤–µ—Ç!", { disable_notification: true }));
    bot.hears(["mod", "repair", "service", "problem", "tuning"], (ctx) => ctx.reply("@electrotallinn_service - ElectroTallinn Service Group \nTech help, Mods, Tuning, Repair, Service", { disable_notification: true }));
    bot.hears(["–ø—Ä–æ–±–ª–µ–º–∞", "–ø–æ—á–∏–Ω–∏—Ç—å", "–∑–∞–º–µ–Ω–∞", "—Ç—é–Ω–∏–Ω–≥", "—Å–µ—Ä–≤–∏—Å", "—Ç–µ—Ö", "–∞–∫—É–º", "—Å–µ—Ä–≤–∏—Å"], (ctx) => ctx.reply("@electrotallinn_service - ElectroTallinn –ú–∞—Å—Ç–µ—Ä—Å–∫–∞—è \n–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º, –°–µ—Ä–≤–∏—Å, –¢—é–Ω–∏–Ω–≥, –ó–∞–ø—á–∞—Å—Ç–∏", { disable_notification: true }));
    bot.hears("hi", (ctx) => ctx.reply("*Hey* there", { disable_web_page_preview: true, parse_mode: "Markdown", disable_notification: true }));
    bot.hears("map", (ctx) => ctx.replyWithHTML("<a href='https://map.electrotallinn.ee'>Map</a>", { disable_web_page_preview: true, disable_notification: true }));

    bot.on('location', async ctx => {
      //console.log(ctx.message.message_thread_id)
      //if (ctx.message.message_thread_id == '106281' || ctx.message.message_thread_id == 'undefined') {}
      if (ctx.message.chat.id == '-1001298173179' && ctx.message.from.is_bot == false) {
        ctx.sendMessage(-1001298173179, { message_thread_id: 143695, text: `<b>ET‚ö°Ô∏èLocation</b>\n\nüöÄ <b>${ctx.message.from.first_name}</b> –Ω–∞—á–∞–ª –¥–≤–∏–∂–µ–Ω–∏–µ!\nüìç –°–ª–µ–¥–∏—Ç–µ –Ω–∞ –∫–∞—Ä—Ç–µ –Ω–∏–∂–µ!`, disable_web_page_preview: true, parse_mode: "HTML", disable_notification: true });
        ctx.forwardMessage(-1001298173179, { message_thread_id: 143695 }, ctx.chat.id, ctx.message.from.id);
      }
    });

    // ------------- Filters ------------- //

    bot.on('message', ctx => {
      //console.log(ctx.message.chat.id)
      // main ctx.message.chat.id -1001298173179
      // service ctx.message.message_thread_id 106266
      // -- ctx.message.message_thread_id --
      // general thread 
      // rides thread 106281
      // location thread 143695
      // chat thread 106277
      if (ctx.message.text && ctx.message.message_thread_id != '106277' && ctx.message.chat.id != '-1001207578072') {
        if (censure.some(word => ctx.message.text.toString().toLowerCase().split(" ").includes(word))) {
          ctx.replyWithMarkdown(`*${ctx.message.from.first_name}*, –Ω–µ —Ä—É–≥–∞–µ–º—Å—è :) - _—Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ_`);
          ctx.deleteMessage();
        }
      }
      
    });

  }

}