const { Telegraf, session, Scenes: { WizardScene, Stage }, Composer, Context, Markup } = require("telegraf");
const axios = require('axios').default;
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();
// MySQL
const mysql = require('mysql');
const connection = mysql.createPool({
  host      : process.env.DB_HOST,
  user      : process.env.DB_USER,
  password  : process.env.DB_PASS,
  database  : process.env.DB_NAME
});

let langCode, userName;

// Language based answers
const localizedStrings = {
  chatTypeText: {
    'en': '[Warning] This command only for private chat. Lets talk in private - @ElectroTallinnBot :)',
    'et-ee': '[Hoiatus] See k√§sk on m√µeldud ainult privaatseks vestluseks. R√§√§gime privaatselt - @ElectroTallinnBot :)',
    'ru': '[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–≥–æ–≤–æ—Ä–∏–º –Ω–∞–µ–¥–∏–Ω–µ - @ElectroTallinnBot :)'
  },
  titleText: {
    'en': '‚ö†Ô∏è Before adding a point, please make sure that the outlet is working and same point has not been previously added to the map!\n\n1Ô∏è‚É£ *Name*\nPlease name the place, write address, company or street name near the object.',
    'et-ee': '‚ö†Ô∏è Enne punkti lisamist veenduge, et pistikupesa t√∂√∂tab ja et sellist punkti pole kaardile varem lisatud.!\n\n1Ô∏è‚É£ *Nimi*\nPalun nimatage koht, kirjutage objekti l√§hedale aadress, ettev√µtte v√µi t√§nava nimi.',
    'ru': '‚ö†Ô∏è –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ—á–∫–∏ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ —Ä–æ–∑–µ—Ç–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Ç–∞–∫–∞—è —Ç–æ—á–∫–∞ —É–∂–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ –Ω–∞ –∫–∞—Ä—Ç—É!\n\n1Ô∏è‚É£ *–ù–∞–∑–≤–∞–Ω–∏–µ*\n–ù–∞–∑–æ–≤–∏—Ç–µ –º–µ—Å—Ç–æ: –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å, –∫–æ–º–ø–∞–Ω–∏—é –∏–ª–∏ —É–ª–∏—Ü—É —Ä—è–¥–æ–º —Å –æ–±—ä–µ–∫—Ç–æ–º.'
  },
  descriptionText: {
    'en': '2Ô∏è‚É£ *Desription*\nPlease describe place. Is it outside or inside? How to find it in place.',
    'et-ee': '2Ô∏è‚É£ *Kirjeldus*\nPalun kirjeldage kohta. Kas see on v√§ljas v√µi sees? Kuidas seda kohal leida.',
    'ru': '2Ô∏è‚É£ *–û–ø–∏—Å–∞–Ω–∏–µ*\n–û–ø–∏—à–∏—Ç–µ –º–µ—Å—Ç–æ. –≠—Ç–æ —Å–Ω–∞—Ä—É–∂–∏ –∏–ª–∏ –≤–Ω—É—Ç—Ä–∏? –ö–∞–∫ –Ω–∞–π—Ç–∏ –Ω–∞ –º–µ—Å—Ç–µ.'
  },
  typeText: {
    'en': '3Ô∏è‚É£ *Type*\nPlease select type of place.',
    'et-ee': '3Ô∏è‚É£ *T√º√ºp*\nPalun valige koha t√º√ºp.',
    'ru': '3Ô∏è‚É£ *–¢–∏–ø*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ—Å—Ç–∞.'
  },
  coordsText: {
    'en': '4Ô∏è‚É£ *Location*\nPlease select your current location or use marker for custom location.',
    'et-ee': '4Ô∏è‚É£ *Asukoht*\nPalun valige oma praegune asukoht v√µi kasutage kohandatud asukoha jaoks markerit.',
    'ru': '4Ô∏è‚É£ *–ú–µ—Å—Ç–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è*\n–î–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø—É –ª–∏–±–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫—É(–ª–æ–∫–∞—Ü–∏—é) –Ω–∞ –∫–∞—Ä—Ç–µ —á–µ—Ä–µ–∑ "—Å–∫—Ä–µ–ø–∫—É"'
  },
  coordsBtnText: {
    'en': 'My current location.',
    'et-ee': 'Minu praegune asukoht.',
    'ru': '–ú–æ–µ —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.'
  },
  photoText: {
    'en': '5Ô∏è‚É£ *Photo*\nPlease take a picture of the objec in landscape mode.',
    'et-ee': '5Ô∏è‚É£ *Foto*\nPalun pildistage objekt maastikure≈æiimis.',
    'ru': '5Ô∏è‚É£ *–§–æ—Ç–æ*\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
  },
  finalText: {
    'en': 'üëç <b>Thank you</b> üëç\nLocation will be approved in 24h and added to the <a href="https://map.electrotallinn.ee">map</a>.',
    'et-ee': 'üëç <b>T√§name</b> üëç\nAsukoht kinnitatakse 24 tunni jooksul ja lisatakse <a href="https://map.electrotallinn.ee">kaardile</a>.',
    'ru': 'üëç <b>–°–ø–∞—Å–∏–±–æ</b> üëç\n–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ <a href="https://map.electrotallinn.ee">–∫–∞—Ä—Ç—É</a>.'
  },
  leaveText: {
    'en': 'Ended.',
    'et-ee': 'L√µppenud.',
    'ru': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ.'
  }
}

module.exports = {
  init: bot => {

    // markup elements
    const exit_keyboard = Markup.inlineKeyboard([
      Markup.button.callback('‚ùå', 'exit')
    ])
    const remove_keyboard = Markup.removeKeyboard();

    const coords_keyboard = Markup.keyboard([
      Markup.button.locationRequest('üìç [Location]')
    ]).resize().oneTime();

    const type_keyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "‚ö° [Charging]", callback_data: "CHARGE" }],
          [{ text: "üõ†Ô∏è [Repair]", callback_data: "REPAIR" }],
          [{ text: "üí¶ [Water]", callback_data: "WATER" }],
          [{ text: "üí® [Air]", callback_data: "AIR" }],
          [{ text: "‚ùå", callback_data: "exit" }]
        ]
      })
    };


    // scene steps
    const titleHandler = new Composer()
    titleHandler.on('text', async ctx => {
      console.log("T1: " + ctx.message.text + " by USER: " + userName);
      ctx.scene.state.title = ctx.message.text;
      console.log(ctx.message);
      await ctx.replyWithMarkdown(localizedStrings['descriptionText'][langCode], exit_keyboard);
      return ctx.wizard.next();
    })

    const descriptionHandler = new Composer()
    descriptionHandler.on('text', async ctx => {
      console.log("T2: " + ctx.message.text + " by USER: " + userName);
      ctx.scene.state.description = ctx.message.text;
      await ctx.replyWithMarkdown(localizedStrings['typeText'][langCode], type_keyboard);
      return ctx.wizard.next();
    });

    const typeHandler = new Composer()
    typeHandler.on("callback_query", async ctx => {
      console.log("TYPE: " + ctx.update.callback_query.data + " by USER: " + userName);
      ctx.scene.state.type = ctx.update.callback_query.data;
      await ctx.replyWithMarkdown(localizedStrings['coordsText'][langCode], coords_keyboard);
      return ctx.wizard.next();
    });

    const coordsHandler = new Composer()
    coordsHandler.on('location', async ctx => {
      console.log("POS: " + ctx.message.location.latitude + ',' + ctx.message.location.longitude + " by USER: " + userName);
      ctx.scene.state.lat = ctx.message.location.latitude;
      ctx.scene.state.lng = ctx.message.location.longitude;
      await ctx.replyWithMarkdown(localizedStrings['photoText'][langCode], exit_keyboard);
      return ctx.wizard.next();

    });

    const imageHandler = new Composer()
    imageHandler.on('photo', async ctx => {
      // Get Image
      const getUrl = await ctx.telegram.getFileLink(ctx.message.photo[2].file_id);
      const imgUrl = getUrl.href;
      console.log("IMG URL: " + imgUrl + " by USER: " + userName);

      const response = await axios.get(imgUrl, { responseType: 'arraybuffer' })
      const buffer = Buffer.from(response.data, 'binary');

      // MySQL
      connection.getConnection(function (err, c) {
        if (err) {
          console.log(err);
          c.release();
          return;
        }
        const fields = {
          title: ctx.scene.state.title,
          description: ctx.scene.state.description,
          lat: ctx.scene.state.lat,
          lng: ctx.scene.state.lng,
          image: buffer,
          image_name: uuidv4() + '.jpg',
          type: ctx.scene.state.type,
          user_first_name: ctx.message.chat.first_name,
          user_uin: ctx.message.from.id,
          confirmed: false
        };
        c.query('INSERT INTO locations SET ?', fields, function (error, result) {
          console.log(result);
          //console.log(error);
          c.release();
        });
      });

      await ctx.replyWithHTML(localizedStrings['finalText'][langCode], remove_keyboard);
      await bot.telegram.sendMessage(371176498, `*DONE:*\n${userName} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ—á–∫—É, ${ctx.scene.state.title}, ${ctx.scene.state.description}. –Ø–∑—ã–∫ [ ${langCode} ]`, { parse_mode: "Markdown" });
      console.log("MAP | DONE by USER: " + userName);

      return ctx.scene.leave();
    });


    // scene
    const mapScene = new WizardScene('mapScene', titleHandler, descriptionHandler, typeHandler, coordsHandler, imageHandler);
    mapScene.enter(ctx => ctx.replyWithMarkdown(localizedStrings['titleText'][langCode], exit_keyboard));
    mapScene.leave(ctx => {
      console.log("MAP | ABORTED by USER: " + userName)
      bot.telegram.sendMessage(ctx.chat.id, localizedStrings['leaveText'][langCode], remove_keyboard)
    });

    return mapScene
  },

  initCommand: bot => {

    // get user lang
    function setLang(ctx) {
      const userLang = ctx.update.message.from.language_code;
      if (userLang == "ru" || userLang == "et-ee") {
        langCode = ctx.message.from.language_code;
      } else {
        langCode = "en";
      }
      console.log("LANG: " + langCode + " by USER: " + userName);
    }

    // command to start
    bot.command("/add", async ctx => {
      userName = ctx.update.message.chat.first_name;
      console.log("MAP | STARTED by USER: " + userName);
      if (ctx.message.chat.type != 'private') {
        bot.telegram.sendMessage(ctx.chat.id, localizedStrings['chatTypeText'][langCode]);
      } else {
        ctx.scene.leave();
        ctx.scene.enter('mapScene');
        setLang(ctx);
      }
      bot.telegram.sendMessage(371176498, `*MAP | STARTED:*\n–ù–∞—á–∞–ª, [ ${userName} ], —è–∑—ã–∫ [ ${langCode} ]`, { parse_mode: "Markdown" });
    });

  }

}