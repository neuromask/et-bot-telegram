const { Telegraf, session, Scenes: { WizardScene, Stage }, Composer, Context, Markup } = require("telegraf");
const fileManagerHelper = require("./utils/FileManagerHelper.js");
const db = require("./db.js");
const axios = require('axios').default;
const { v4: uuidv4 } = require('uuid');

let langCode, userName;

const localizedStrings = {
  'en': {
    'chatTypeText': '[Warning] This command only for private chat. Lets talk in private - @ElectroTallinnBot :)',
    'titleText': '‚ö†Ô∏è Before adding a product, make sure you have added a username in your Telegram settings!\n\n1Ô∏è‚É£ *Name* \nName: Enter the name of the product.',
    'descriptionText': '2Ô∏è‚É£ *Desription*\nDescribe the product. Condition, characteristics, wear, etc.',   
    'priceText': '3Ô∏è‚É£ *Price*\nWrite product price in euros.',
    'categoryText': '4Ô∏è‚É£ *Category*\nSelect a product category.',
    'categoryButtonText': '4Ô∏è‚É£ *Category*\nSelect a product category.',
    'photoText': '5Ô∏è‚É£ *Photo*\nTake a photo of the product or download from your phone library.',
    'finalText': 'üëç <b>Thank you</b> üëç\nProduct will be approved in 24h and added to the <a href="https://app.electrotallinn.ee/market">market</a>.',
    'leaveText': 'Ended.',
    'categoryButtonText': {
      'TRANSPORT': 'üõ¥ [Transport]',
      'SPARE_PARTS':'‚öôÔ∏è [Spare parts]',
      'ACCESSORIES':'üö• [Accessories]',
      'EQUIPMENT':'üëñ [Equipment]',
      'OTHER':'‚ö° [Other]'
    },
    'leaveText': 'Ended'
  },
  'ru': {
    'chatTypeText': '[–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ] –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞. –ü–æ–≥–æ–≤–æ—Ä–∏–º –Ω–∞–µ–¥–∏–Ω–µ - @ElectroTallinnBot :)',
    'titleText': '‚ö†Ô∏è –ü–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–≤–∞—Ä–∞ —É–±–µ–¥–∏—Ç–µ—Å—å –≤ —Ç–æ–º, —á—Ç–æ —É –≤–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Telegram!\n\n1Ô∏è‚É£ *–ù–∞–∑–≤–∞–Ω–∏–µ*\n–ù–∞–∑–≤–∞–Ω–∏–µ: –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞.',
    'descriptionText': '2Ô∏è‚É£ *–û–ø–∏—Å–∞–Ω–∏–µ*\n–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä. –°–æ—Å—Ç–æ—è–Ω–∏–µ, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞, –∏–∑–Ω–æ—Å –∏ —Ç.–¥.',
    'priceText': '3Ô∏è‚É£ *–¶–µ–Ω–∞*\n–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –µ–≤—Ä–æ.',
    'categoryText': '4Ô∏è‚É£ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.',
    'categoryButtonText': '4Ô∏è‚É£ *–ö–∞—Ç–µ–≥–æ—Ä–∏—è*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞.',
    'photoText': '5Ô∏è‚É£ *–§–æ—Ç–æ*\n–°–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.',
    'finalText': 'üëç <b>–°–ø–∞—Å–∏–±–æ</b> üëç\n–¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ <a href="https://app.electrotallinn.ee/market">–º–∞—Ä–∫–µ—Ç</a>.',
    'leaveText': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ.',
    'categoryButtonText': {
      'TRANSPORT': 'üõ¥ [–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç]',
      'SPARE_PARTS':'‚öôÔ∏è [–ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ]',
      'ACCESSORIES':'üö• [–ê–∫—Å—É—Å—É–∞—Ä—ã]',
      'EQUIPMENT':'üëñ [–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞]',
      'OTHER':'‚ö° [–î—Ä—É–≥–æ–µ]'
    },
    'leaveText': 'Ended'
  },
  'et-ee': {
    'chatTypeText': '[Hoiatus] See k√§sk on m√µeldud ainult privaatseks vestluseks. R√§√§gime privaatselt - @ElectroTallinnBot :)',
    'titleText': '‚ö†Ô∏è Enne toote lisamist veendu, et oled Telegrami seadetes lisanud kasutajanime!\n\n1Ô∏è‚É£ *Nimi*\nSisesta toote nimi.',
    'descriptionText': '2Ô∏è‚É£ *Kirjeldus*\nKirjeldage toodet. Seisukord, omadused, kulumine jne.',
    'priceText': '3Ô∏è‚É£ *Hind*\nM√§rkige kauba hind eurodes.',
    'categoryText': '4Ô∏è‚É£ *Kategooria*\nValige tootekategooria.',
    'categoryButtonText': '4Ô∏è‚É£ *Kategooria*\nValige tootekategooria.',
    'photoText': '5Ô∏è‚É£ *Foto*\nTehke tootest foto v√µi laadige alla oma telefoniraamatukogust.',
    'finalText': 'üëç <b>T√§name</b> üëç\nKaup kinnitatakse 24 tunni jooksul ja lisatakse <a href="https://app.electrotallinn.ee/market">turule</a>.',
    'leaveText': 'L√µppenud.',
    'categoryButtonText': {
      'TRANSPORT': 'üõ¥ [Transport]',
      'SPARE_PARTS':'‚öôÔ∏è [Komponendid]',
      'ACCESSORIES':'üö• [Aksessuaarid]',
      'EQUIPMENT':'üëñ [Varustus]',
      'OTHER':'‚ö° [Muud]'
    },
    'leaveText': 'Ended'
  }
}

module.exports = {
  init: bot => {

    // markup elements
    //const exitKeyboard = Markup.keyboard(['Exit']).resize().oneTime();
    const remove_keyboard = Markup.inlineKeyboard([])
    //const exitKeyboard = Markup.inlineKeyboard([
    //  Markup.button.callback('‚ùå', 'exit')
    //])
    const exitKeyboard = {
      reply_markup: JSON.stringify({
        inline_keyboard: [
          [{ text: "‚ùå", callback_data: "exit" }]
        ]
      })
    };
    getCategoryKeyboard = () => {
      let buttons = marketProductCategories.map((category) => {return [{text: localizedStrings[langCode]['categoryButtonText'][category], callback_data: category}]})
      return {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            ...buttons,
            [{ text: "‚ùå", callback_data: "exit" }]
          ]
        })
      }
    }
    const marketProductCategories = ["TRANSPORT", "SPARE_PARTS", "ACCESSORIES", "EQUIPMENT", "OTHER"]

    translate = (path) => {
      let parts = path.split('.')
      return parts.reduce((previousValue, currentValue) => previousValue[currentValue], localizedStrings[langCode])
    }

    // scene steps
    const titleHandler = new Composer()
    titleHandler.on('text', async ctx => {
      console.log("M1: " + ctx.message.text + " by USER: " + userName);
      ctx.scene.state.title = ctx.message.text;
      bot.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.message.message_id-1, reply_markup={})
      await ctx.replyWithMarkdown(translate('descriptionText'), exitKeyboard);
      return ctx.wizard.next();
    })

    const descriptionHandler = new Composer()
    descriptionHandler.on('text', async ctx => {
      console.log("M2: " + ctx.message.text + " by USER: " + userName);
      ctx.scene.state.description = ctx.message.text;
      bot.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.message.message_id-1, reply_markup={})
      await ctx.replyWithMarkdown(translate('priceText'), exitKeyboard);
      return ctx.wizard.next();
    });

    const priceHandler = new Composer()
    priceHandler.on('text', async ctx => {
      console.log("M3: " + ctx.message.text + " by USER: " + userName);
      ctx.scene.state.price = ctx.message.text;
      bot.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.message.message_id-1, reply_markup={})
      await ctx.replyWithMarkdown(translate('categoryText'), getCategoryKeyboard());
      return ctx.wizard.next();
    });
    // buttons to select
    const categoryHandler = new Composer()
    categoryHandler.on("callback_query", async ctx => {
      //bot.telegram.answerCallbackQuery(ctx.update.callback_query.id, {text: 'No news'});
      //ctx.answerCbQuery()
      ctx.editMessageReplyMarkup(reply_markup={})
      console.log("CATEGORY: " + ctx.update.callback_query.data + " by USER: " + userName);
      ctx.scene.state.category = ctx.update.callback_query.data;
      await bot.telegram.sendMessage(ctx.chat.id, translate('categoryButtonText.'+ctx.update.callback_query.data));
      await ctx.replyWithMarkdown(translate('photoText'), exitKeyboard);
      return ctx.wizard.next();
    });

    const imageHandler = new Composer()
    imageHandler.on('photo', async ctx => {
      bot.telegram.editMessageReplyMarkup(ctx.chat.id, ctx.message.message_id-1, reply_markup={})

      // Get Image
      const getUrl = await ctx.telegram.getFileLink(ctx.message.photo[3].file_id);
      const imgUrl = getUrl.href;
      console.log("IMG URL: " + imgUrl + " by USER: " + userName);

      const response = await axios.get(imgUrl, { responseType: 'arraybuffer' })
      const b64image = Buffer.from(response.data, 'binary').toString('base64')

      // product creation in DB
      let sql = "INSERT INTO market_products (user_uin, name, description, price, status, date_created, category) VALUES (?, ?, ?, ?, ?, ?, ?)";
      let params = [ctx.message.from.id, ctx.scene.state.title, ctx.scene.state.description, ctx.scene.state.price, 'NEW', new Date(), ctx.scene.state.category];

      let result = await db.query(sql, params);

      // image creation in DB
      let fileName = uuidv4() + '.jpg';
      let token = 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmaXJzdE5hbWUiOiLQkNC70LXQutGB0LDQvdC00YAiLCJ1aW4iOjM3MTE3NjQ5OCwicGhvdG9VcmwiOiJodHRwczovL3QubWUvaS91c2VycGljLzMyMC9CWFBKNURtb2g4WnBDdDNWcHU2RWxnTzBUMFRsejlqaFNrX3ZaaFo5WVB3LmpwZyIsInVzZXJuYW1lIjoibmV1cm9tYXNrIiwicm9sZSI6IkFETUlOIiwiaWF0IjoxNjM4MTQ0MzcwLCJleHAiOjE2MzgyMzA3NzB9.eUkLs7nS2W4jTUavt0ydPbv_wFLLQWFzPRBEzNeYH7E';
      await fileManagerHelper.create('market', b64image, fileName, token);

      let sqlFile = "INSERT INTO market_product_images (market_product_id, file_name) VALUES (?, ?)";
      let paramsFile = [result.insertId, fileName];
      await db.query(sqlFile, paramsFile);

      await ctx.replyWithHTML(translate('finalText'));
      await bot.telegram.sendMessage(371176498, `*DONE:*\n${userName} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä, ${ctx.scene.state.title}, ${ctx.scene.state.description}. –Ø–∑—ã–∫ [ ${langCode} ]`, { parse_mode: "Markdown" });
      console.log("MARKET | DONE by USER: " + userName);

      return ctx.scene.leave();
    });


    // scene
    const marketScene = new WizardScene('marketScene', titleHandler, descriptionHandler, priceHandler, categoryHandler, imageHandler);
    marketScene.enter(ctx => {
      ctx.replyWithMarkdown(translate('titleText'), exitKeyboard)
      console.log(ctx)
    });
    marketScene.leave(ctx => {
      console.log("MARKET | ABORTED by USER: " + userName)
      bot.telegram.sendMessage(ctx.chat.id, translate('leaveText'), remove_keyboard)
    });

    return marketScene
  },

  initCommand: bot => {

    // get user lang
    function setLang(ctx) {
      const userLang = ctx.update.message.from.language_code;
      if (userLang == "ru" || userLang == "et-ee") {
        langCode = ctx.message.from.language_code;
      } else {
        langCode = "en";
      }
      console.log("LANG: " + langCode + " by USER: " + userName);
    }

    // command to start
    bot.command("/sell", async ctx => {
      userName = ctx.update.message.chat.first_name;
      console.log("MARKET | STARTED by USER: " + userName);
      if (ctx.message.chat.type != 'private') {
        bot.telegram.sendMessage(ctx.chat.id, translate('chatTypeText'));
      } else {
        ctx.scene.leave();
        ctx.scene.enter('marketScene');
        setLang(ctx);
      }
      bot.telegram.sendMessage(371176498, `*MARKET | STARTED:*\n–ù–∞—á–∞–ª, [ ${userName} ], —è–∑—ã–∫ [ ${langCode} ]`, { parse_mode: "Markdown" });
    });

  }

}